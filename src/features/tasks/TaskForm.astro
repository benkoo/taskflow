---
import type { Priority } from './types';

interface TaskFormProps {
  onAddTask?: (task: { title: string; priority: Priority }) => void;
}

const { onAddTask } = Astro.props as TaskFormProps;

// This tells TypeScript that we're in a browser environment
declare global {
  interface Window {
    taskForm?: HTMLFormElement;
  }
}
---

<form 
  id="taskForm" 
  class="mb-6 bg-white p-4 rounded-lg shadow-sm border border-gray-200"
  onsubmit="event.preventDefault();"
>
  <div class="flex flex-col space-y-4 sm:flex-row sm:space-y-0 sm:space-x-4">
    <div class="flex-1">
      <label for="taskInput" class="sr-only">Add a new task</label>
      <input
        type="text"
        id="taskInput"
        placeholder="What needs to be done?"
        class="w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
        required
      />
    </div>
    <div class="flex-shrink-0">
      <label for="prioritySelect" class="sr-only">Priority</label>
      <select
        id="prioritySelect"
        class="block w-full pl-3 pr-10 py-2 text-base border border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
      >
        <option value="low">Low</option>
        <option value="medium" selected>Medium</option>
        <option value="high">High</option>
      </select>
    </div>
    <button
      type="submit"
      class="px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 whitespace-nowrap"
    >
      Add Task
    </button>
  </div>
</form>

<script>
  // Import the Priority type
  import type { Priority } from './types';

  // Get the onAddTask function from the component props
  const onAddTask = (window as any).onAddTask as ((task: { title: string; priority: Priority }) => void) | undefined;

  // TypeScript type guard to check if the element is an HTMLInputElement
  function isHTMLInputElement(element: Element | null): element is HTMLInputElement {
    return element?.tagName === 'INPUT';
  }

  // TypeScript type guard to check if the element is an HTMLSelectElement
  function isHTMLSelectElement(element: Element | null): element is HTMLSelectElement {
    return element?.tagName === 'SELECT';
  }

  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('taskForm');
    const input = document.getElementById('taskInput');
    const prioritySelect = document.getElementById('prioritySelect');

    if (form && isHTMLInputElement(input) && isHTMLSelectElement(prioritySelect)) {
      form.addEventListener('submit', (e) => {
        e.preventDefault();
        
        const title = input.value.trim();
        const priority = prioritySelect.value as Priority;
        
        if (title && onAddTask) {
          onAddTask({ title, priority });
          input.value = '';
          prioritySelect.value = 'medium';
        }
      });
    }
  });
</script>
