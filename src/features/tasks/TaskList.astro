---
import type { Task } from './types';
import { getPriorityClasses } from './utils';

interface TaskListProps {
  initialTasks?: Task[];
}

const { initialTasks = [] } = Astro.props as TaskListProps;
---

<div class="space-y-3 task-list">
  {initialTasks.map((task) => {
    const priorityClasses = getPriorityClasses(task.priority);
    const checkboxId = `task-${task.id}`;
    
    return (
      <div 
        class={`flex items-center p-4 border rounded-lg ${
          task.completed ? 'bg-gray-50' : 'bg-white'
        } ${priorityClasses.border}`}
        data-task-id={task.id}
      >
        <input 
          id={checkboxId}
          type="checkbox" 
          checked={task.completed}
          class="h-5 w-5 text-blue-600 rounded border-gray-300 focus:ring-blue-500"
        />
        <label 
          for={checkboxId}
          class={`ml-3 flex-1 cursor-pointer ${
            task.completed ? 'line-through text-gray-500' : 'text-gray-800'
          }`}
        >
          {task.title}
        </label>
        <div class="flex items-center space-x-2">
          <span class={`px-2 py-1 text-xs font-medium rounded-full ${priorityClasses.bg} ${priorityClasses.text}`}>
            {task.priority}
          </span>
          <button 
            class="text-gray-400 hover:text-red-500 focus:outline-none"
            aria-label={`Delete task: ${task.title}`}
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
            </svg>
          </button>
        </div>
      </div>
    );
  })}
</div>

<script>
  // Type definitions for our custom events
  interface TaskEventDetail {
    id: number;
  }

  // Extend the Window interface to include our custom events
  declare global {
    interface WindowEventMap {
      'task:toggle': CustomEvent<TaskEventDetail>;
      'task:delete': CustomEvent<TaskEventDetail>;
    }
  }

  // Wait for the DOM to be fully loaded
  document.addEventListener('DOMContentLoaded', () => {
    // Get the task list container
    const taskList = document.querySelector('.task-list');
    
    if (!taskList) return;
    
    // Add click event listener for task toggling and deletion
    taskList.addEventListener('click', (e) => {
      const target = e.target;
      if (!(target instanceof HTMLElement)) return;
      
      const taskItem = target.closest('[data-task-id]');
      if (!taskItem) return;
      
      const taskIdAttr = taskItem.getAttribute('data-task-id');
      if (!taskIdAttr) return;
      
      const taskId = parseInt(taskIdAttr, 10);
      if (isNaN(taskId)) return;
      
      // Handle task toggle
      if (target.matches('input[type="checkbox"]')) {
        const event = new CustomEvent('task:toggle', { 
          detail: { id: taskId } 
        });
        window.dispatchEvent(event);
      }
      
      // Handle task deletion
      if (target.closest('button[aria-label^="Delete"]')) {
        if (confirm('Are you sure you want to delete this task?')) {
          const event = new CustomEvent('task:delete', { 
            detail: { id: taskId } 
          });
          window.dispatchEvent(event);
        }
      }
    });
  });
</script>
