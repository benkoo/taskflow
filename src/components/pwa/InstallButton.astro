---
// PWA Install Button Component
interface Props {
  className?: string;
  showInstructions?: boolean;
}

const { className = '', showInstructions = true } = Astro.props;
---

<button 
  id="install-button" 
  class:list={[
    'bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded transition-colors',
    className
  ]}
  aria-label="Install app"
>
  Install App
</button>

{showInstructions && (
  <div class="mt-2 space-y-2">
    <p class="text-sm text-gray-600" id="install-instructions">
      Click the button above to install this PWA
    </p>
    <p class="text-xs text-gray-500" id="debug-info"></p>
  </div>
)}

<script>
  // Get DOM elements
  const installButton = document.getElementById('install-button');
  const installInstructions = document.getElementById('install-instructions');
  const debugInfo = document.getElementById('debug-info');
  
  // Function to update the UI
  function updateUI(message: string, debugMessage: string = '') {
    if (installInstructions) {
      installInstructions.textContent = message;
    }
    if (debugInfo && debugMessage) {
      debugInfo.textContent = debugMessage;
    }
  }
  
  // Check if the app is already installed
  const isStandalone = window.matchMedia('(display-mode: standalone)').matches || 
                      (navigator as any).standalone ||
                      (document.referrer && document.referrer.includes('android-app://'));
  
  if (isStandalone) {
    updateUI('App is installed and running in standalone mode');
    if (installButton) {
      installButton.style.display = 'none';
    }
  } else {
    // Handle install button click
    if (installButton) {
      installButton.onclick = async () => {
        const deferredPrompt = (window as any).deferredPrompt;
        
        if (!deferredPrompt) {
          updateUI('Installation not available in this context', 'No installation event fired');
          return;
        }
        
        try {
          // Show the install prompt
          deferredPrompt.prompt();
          
          // Wait for the user to respond to the prompt
          const { outcome } = await deferredPrompt.userChoice;
          
          // Log the result
          console.log(`User ${outcome} the install prompt`);
          
          if (outcome === 'accepted') {
            updateUI('Thank you for installing!', 'User accepted installation');
          } else {
            updateUI('Installation was cancelled', 'User dismissed installation');
          }
          
          // Hide the button after installation attempt
          if (installButton) {
            installButton.style.display = 'none';
          }
        } catch (error) {
          console.error('Error during installation:', error);
          updateUI('Error during installation', 'Check console for details');
        }
      };
    }
    
    // Initial UI update
    updateUI('Click the button above to install this PWA', 'Waiting for installation event...');
  }
</script>
